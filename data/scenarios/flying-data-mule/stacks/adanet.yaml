version: "2.4"
services:

    glider-source:
        image: docker.io/chaos-whoi/whoi-slocum-adaptive-networking:master-${ARCH:?ARCH_NOT_SET}
        container_name: glider
        environment:
            DEBUG: 0
            WANDB_OFFLINE: 0
            WANDB_PROJECT: ${WANDB_PROJECT:?WANDB_PROJECT_NOT_SET}
        volumes:
            - type: bind
              source: /var/run/avahi-daemon/socket
              target: /var/run/avahi-daemon/socket
            - type: bind
              source: ..
              target: /problem
        command: "-- source --agent glider --problem /problem/glider${GLIDER_PROBLEM_FLAVOR}.yaml ${GLIDER_OPTS}"
        network_mode: ${GLIDER_NETWORK}
        stop_grace_period: 30s

    drone-glider:
        image: docker.io/chaos-whoi/whoi-slocum-adaptive-networking:master-${ARCH:?ARCH_NOT_SET}
        container_name: glider-to-drone
        environment:
            DEBUG: 0
            WANDB_OFFLINE: 0
            WANDB_PROJECT: ${WANDB_PROJECT:?WANDB_PROJECT_NOT_SET}
        volumes:
            - type: bind
              source: ..
              target: /problem
            - type: volume
              source: db
              target: /tmp/queue/persistent
              volume:
                nocopy: true
        command: "-- sink --agent glider-to-drone --problem /problem/drone-glider${GLIDER_DRONE_PROBLEM_FLAVOR}.yaml ${DRONE_GLIDER_OPTS}"
        network_mode: ${GLIDER_DRONE_NETWORK}
        stop_grace_period: 30s

    drone-football:
        image: docker.io/chaos-whoi/whoi-slocum-adaptive-networking:master-${ARCH:?ARCH_NOT_SET}
        container_name: drone-to-football
        environment:
            DEBUG: 0
            WANDB_OFFLINE: 0
            WANDB_PROJECT: ${WANDB_PROJECT:?WANDB_PROJECT_NOT_SET}
        volumes:
            - type: bind
              source: ..
              target: /problem
            - type: volume
              source: db
              target: /tmp/queue/persistent
              volume:
                  nocopy: true
        command: "-- source --agent drone-to-football --problem /problem/drone-football${DRONE_FOOTBALL_PROBLEM_FLAVOR}.yaml ${DRONE_FOOTBALL_OPTS}"
        network_mode: ${DRONE_FOOTBALL_NETWORK}
        stop_grace_period: 30s

    football-toughbook:
        image: docker.io/chaos-whoi/whoi-slocum-adaptive-networking:master-${ARCH:?ARCH_NOT_SET}
        container_name: football-to-toughbook
        environment:
            DEBUG: 0
            WANDB_OFFLINE: 0
            WANDB_PROJECT: ${WANDB_PROJECT:?WANDB_PROJECT_NOT_SET}
        volumes:
            -   type: bind
                source: ..
                target: /problem
            - type: volume
              source: db
              target: /tmp/queue/persistent
              volume:
                  nocopy: true
        command: "-- source --agent football-to-toughbook --problem /problem/football-toughbook${FOOTBALL_TOUGHBOOK_PROBLEM_FLAVOR}.yaml ${FOOTBALL_TOUGHBOOK_OPTS}"
        network_mode: ${FOOTBALL_TOUGHBOOK_NETWORK}
        stop_grace_period: 30s

    football-sink:
        image: docker.io/chaos-whoi/whoi-slocum-adaptive-networking:master-${ARCH:?ARCH_NOT_SET}
        container_name: football
        environment:
            DEBUG: 0
            WANDB_OFFLINE: 0
            WANDB_PROJECT: ${WANDB_PROJECT:?WANDB_PROJECT_NOT_SET}
        volumes:
            - type: bind
              source: ..
              target: /problem
        command: "-- sink --agent football --problem /problem/football${FOOTBALL_PROBLEM_FLAVOR}.yaml ${FOOTBALL_OPTS}"
        network_mode: ${FOOTBALL_NETWORK}
        stop_grace_period: 30s

    toughbook-sink:
        image: docker.io/chaos-whoi/whoi-slocum-adaptive-networking:master-${ARCH:?ARCH_NOT_SET}
        container_name: toughbook
        environment:
            DEBUG: 0
            WANDB_OFFLINE: 0
            WANDB_PROJECT: ${WANDB_PROJECT:?WANDB_PROJECT_NOT_SET}
        volumes:
            -   type: bind
                source: ..
                target: /problem
        command: "-- sink --agent toughbook --problem /problem/toughbook${TOUGHBOOK_PROBLEM_FLAVOR}.yaml ${TOUGHBOOK_OPTS}"
        network_mode: ${TOUGHBOOK_NETWORK}
        stop_grace_period: 30s

volumes:
    db:
